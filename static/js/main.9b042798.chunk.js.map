{"version":3,"sources":["components/Day/styles.module.scss","components/WeekDays/styles.module.scss","styles.module.scss","actions/actions.js","actions/constants.js","components/Search/Search.js","components/MainInfo/MainInfo.js","components/WeekDays/WeekDays.js","components/Day/Day.js","App.js","serviceWorker.js","reducers/weatherForecast.js","reducers/index.js","store.js","index.js","components/MainInfo/styles.module.scss","components/Search/styles.module.scss"],"names":["module","exports","apiKey","getWeatherForecast","city","dispatch","a","type","url","fetch","res","ok","Error","json","data","payload","weatherItems","list","mainInfo","selectedDay","moment","dt_txt","format","selectedHour","errorMessage","message","mapDispatchToProps","connect","useState","setCity","className","styles","searchContainer","button","path","mdiHeart","size","color","onSubmit","e","preventDefault","form","placeholder","input","value","onChange","target","mdiMagnify","mdiMenu","weatherForecast","selectedWeaterItem","find","item","infoContainer","name","country","date","temperature","main","temp","toFixed","wrapper","sunrise","mdiWeatherSunsetUp","Date","wind","mdiWeatherWindy","speed","humidity","mdiWaterOutline","sunset","mdiWeatherSunsetDown","setSelectedDay","state","days","setDays","useEffect","length","uniqueDays","Set","forEach","add","handleClick","innerHTML","firstHourOfDay","daysContainer","map","cx","day","activeDay","onClick","setSelectedHour","weatherHoursItems","filter","currentTarget","id","hoursContainer","hourInfo","activeHour","hour","mdiWeatherPartlyCloudy","weatherIcon","container","Boolean","window","location","hostname","match","initialState","loading","error","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b042798.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoursContainer\":\"styles_hoursContainer__2CDjy\",\"hourInfo\":\"styles_hourInfo__3s_ay\",\"hour\":\"styles_hour__2UXuD\",\"temperature\":\"styles_temperature__3ayDC\",\"activeHour\":\"styles_activeHour__GlumB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"daysContainer\":\"styles_daysContainer__3NFZB\",\"day\":\"styles_day__H-8K9\",\"activeDay\":\"styles_activeDay__1R2RX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__10Lm4\"};","import moment from 'moment';\r\n\r\nimport {\r\n    CLEAR_WEATHER_FORECAST,\r\n    GET_WEATHER_FORECAST,\r\n    ERROR_WEATHER_FORECAST,\r\n    SET_SELECTED_DAY,\r\n    SET_SELECTED_HOUR,\r\n} from './constants';\r\n\r\nconst apiKey = 'de1e94c85ef8c5b5b4456417ebd24daf';\r\n\r\nexport const getWeatherForecast = (city = 'kyiv') => async dispatch => {\r\n    dispatch({ type: CLEAR_WEATHER_FORECAST });\r\n\r\n    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&APPID=${apiKey}`\r\n\r\n    try {\r\n        const res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error('Invalid request');\r\n        }\r\n\r\n        const data = await res.json();\r\n\r\n        dispatch({\r\n            type: GET_WEATHER_FORECAST,\r\n            payload: {\r\n                weatherItems: data.list,\r\n                mainInfo: data,\r\n                selectedDay: moment(data.list[0].dt_txt).format('dddd'),\r\n                selectedHour: moment(data.list[0].dt_txt).format('h a')\r\n            }\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ERROR_WEATHER_FORECAST,\r\n            payload: {\r\n                errorMessage: err.message,\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport const setSelectedDay = (selectedDay, selectedHour) => dispatch => {\r\n    dispatch({\r\n        type: SET_SELECTED_DAY,\r\n        payload: {\r\n            selectedDay,\r\n            selectedHour\r\n        }\r\n    });\r\n};\r\n\r\nexport const setSelectedHour = (selectedHour) => dispatch => {\r\n    dispatch({\r\n        type: SET_SELECTED_HOUR,\r\n        payload: {\r\n            selectedHour\r\n        }\r\n    });\r\n}\r\n","export const GET_WEATHER_FORECAST = 'GET_WEATHER_FORECAST';\r\nexport const CLEAR_WEATHER_FORECAST = 'CLEAR_WEATHER_FORECAST';\r\nexport const ERROR_WEATHER_FORECAST = 'ERROR_WEATHER_ITEMS_FORECAST';\r\nexport const SET_SELECTED_DAY = 'SET_SELECTED_DAY';\r\nexport const SET_SELECTED_HOUR = 'SET_SELECTED_HOUR';\r\n","// modules\r\nimport React, { useState } from 'react';\r\nimport Icon from '@mdi/react';\r\nimport { mdiHeart, mdiMenu, mdiMagnify } from '@mdi/js';\r\nimport { connect } from 'react-redux';\r\n// Redux\r\nimport { getWeatherForecast } from '../../actions/actions';\r\n// styles\r\nimport styles from './styles.module.scss';\r\n\r\nconst Search = ({\r\n    getWeatherForecast\r\n}) => {\r\n    const [city, setCity] = useState('');\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        getWeatherForecast(city);\r\n    }\r\n\r\n    const handleChange = ({ target }) => {\r\n        setCity(target.value)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.searchContainer}>\r\n            <button className={styles.button}>\r\n                <Icon path={mdiHeart} size={1} color=\"white\" />\r\n            </button>\r\n\r\n            <form onSubmit={handleSubmit} className={styles.form}>\r\n                <input\r\n                    placeholder=\"Type location...\"\r\n                    className={styles.input}\r\n                    value={city}\r\n                    onChange={handleChange}\r\n                />\r\n                \r\n                <button className={styles.button}>\r\n                    <Icon path={mdiMagnify} size={1} color=\"white\" />\r\n                </button>\r\n            </form >\r\n\r\n            <button className={styles.button}>\r\n                <Icon path={mdiMenu} size={1} color=\"white\" />\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getWeatherForecast\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(Search);\r\n","// modules\r\nimport React from 'react';\r\nimport Icon from '@mdi/react';\r\nimport { mdiWeatherWindy, mdiWaterOutline, mdiWeatherSunsetUp, mdiWeatherSunsetDown } from '@mdi/js';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\n// styles\r\nimport styles from './styles.module.scss';\r\n\r\nconst MainInfo = ({\r\n    selectedWeaterItem,\r\n    mainInfo\r\n}) => {\r\n    return (\r\n        <>\r\n            {selectedWeaterItem && <div className={styles.infoContainer}>\r\n                <div className={styles.city}>\r\n                    {`${mainInfo.city.name}, ${mainInfo.city.country}`}\r\n                </div>\r\n\r\n                <div className={styles.date}>\r\n                    {moment(selectedWeaterItem.dt_txt).format('ddd, D MMMM')}\r\n                </div>\r\n\r\n                <div className={styles.temperature}>\r\n                    {selectedWeaterItem && selectedWeaterItem.main.temp.toFixed(1)}\r\n                </div>\r\n\r\n                <div className={styles.wrapper}>\r\n                    <div className={styles.sunrise}>\r\n                        <Icon path={mdiWeatherSunsetUp} size={1.2} color=\"white\" />\r\n                        {`${moment(new Date(mainInfo.city.sunrise * 1000)).format('HH:mm')} h`}\r\n                    </div>\r\n\r\n                    <div className={styles.wind}>\r\n                        <Icon path={mdiWeatherWindy} size={1.2} color=\"white\" />\r\n                        {selectedWeaterItem.wind.speed.toFixed(1)} m/s\r\n                </div>\r\n\r\n                    <div className={styles.humidity}>\r\n                        <Icon path={mdiWaterOutline} size={1.2} color=\"white\" />\r\n                        {selectedWeaterItem.main.humidity}%\r\n                </div>\r\n\r\n                <div className={styles.sunset}>\r\n                        <Icon path={mdiWeatherSunsetDown} size={1.2} color=\"white\" />\r\n                        {`${moment(new Date(mainInfo.city.sunset * 1000)).format('HH:mm')} h`}\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ weatherForecast: { weatherItems, selectedDay, selectedHour, mainInfo } }) => ({\r\n    selectedWeaterItem: weatherItems.find(item => moment(item.dt_txt).format('dddd') === selectedDay && moment(item.dt_txt).format('h a') === selectedHour),\r\n    mainInfo\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(MainInfo);\r\n\r\n","// modules\r\nimport React, { useEffect, useState } from 'react';\r\nimport cx from 'classnames';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\n// Redux \r\nimport { setSelectedDay } from '../../actions/actions';\r\n// styles\r\nimport styles from './styles.module.scss';\r\n\r\nconst WeekDays = ({\r\n  weatherItems,\r\n  setSelectedDay,\r\n  selectedDay\r\n}) => {\r\n  const [days, setDays] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (weatherItems.length > 0) {\r\n      let uniqueDays = new Set();\r\n\r\n      weatherItems.forEach(item => {\r\n        uniqueDays.add(moment(item.dt_txt).format('dddd'))\r\n      })\r\n\r\n      setDays([...uniqueDays]);\r\n    }\r\n  }, [weatherItems])\r\n\r\n  const handleClick = ({ target }) => {\r\n    const selectedDay = target.innerHTML;\r\n    const firstHourOfDay = weatherItems.find(item => moment(item.dt_txt).format('dddd') === target.innerHTML)\r\n\r\n    setSelectedDay(selectedDay, moment(firstHourOfDay.dt_txt).format('h a'));\r\n  };\r\n\r\n  return (\r\n    <ul className={styles.daysContainer}>\r\n      {days &&\r\n        days.map(item => <li className={cx(styles.day, { [styles.activeDay]: selectedDay === item })} onClick={handleClick} >{item}</li>)\r\n      }\r\n    </ul>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  weatherItems: state.weatherForecast.weatherItems,\r\n  selectedDay: state.weatherForecast.selectedDay\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  setSelectedDay\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WeekDays);\r\n","// modules\r\nimport React from 'react';\r\nimport Icon from '@mdi/react';\r\nimport { mdiWeatherPartlyCloudy } from '@mdi/js';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport cx from 'classnames';\r\n// Redux\r\nimport { setSelectedHour } from '../../actions/actions';\r\n// styles\r\nimport styles from './styles.module.scss';\r\n\r\nconst Day = ({\r\n    weatherHoursItems,\r\n    setSelectedHour,\r\n    selectedHour\r\n}) => {\r\n    const handleClick = ({ currentTarget }) => {\r\n        setSelectedHour(currentTarget.id)\r\n    }\r\n    \r\n    return (\r\n        <ul className={styles.hoursContainer}>\r\n            {weatherHoursItems && weatherHoursItems.map(item => (\r\n                <li className=\r\n                    {cx(styles.hourInfo, { [styles.activeHour]: selectedHour === moment(item.dt_txt).format('h a') })}\r\n                    id={moment(item.dt_txt).format('h a')}\r\n                    onClick={handleClick}\r\n                >\r\n                    <div className={styles.hour}>\r\n                        {moment(item.dt_txt).format('HH:mm')}\r\n                    </div>\r\n\r\n                    <Icon path={mdiWeatherPartlyCloudy} size={2.5} color=\"white\" className={styles.weatherIcon} />\r\n\r\n                    <div className={styles.temperature}>\r\n                        {item.main.temp.toFixed(1)}\r\n                    </div>\r\n                </li>))}\r\n        </ul>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ weatherForecast: { weatherItems, selectedDay, selectedHour } }) => ({\r\n    weatherHoursItems: weatherItems.filter(item => moment(item.dt_txt).format('dddd') === selectedDay),\r\n    selectedHour\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setSelectedHour\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Day);\r\n","// modules\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n// components\nimport Search from './components/Search';\nimport MainInfo from './components/MainInfo';\nimport WeekDays from './components/WeekDays';\nimport Day from './components/Day';\n// Redux\nimport { getWeatherForecast } from './actions/actions';\n// styles\nimport styles from './styles.module.scss'\n\nconst App = ({\n  weatherForecast,\n  getWeatherForecast\n}) => {\n  useEffect(() => {\n    getWeatherForecast();\n}, [getWeatherForecast]);\n\n  return (\n    <div className={styles.container}>\n      <Search />\n      <MainInfo />\n      <WeekDays />\n      <Day />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  weatherForecast: state.weatherForecast,\n});\n\nconst mapDispatchToProps = {\n  getWeatherForecast\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    GET_WEATHER_FORECAST,\r\n    CLEAR_WEATHER_FORECAST,\r\n    ERROR_WEATHER_FORECAST,\r\n    SET_SELECTED_DAY,\r\n    SET_SELECTED_HOUR,\r\n} from \"../actions/constants\";\r\n\r\nexport const initialState = {\r\n    mainInfo: {},\r\n    weatherItems: [],\r\n    loading: false,\r\n    error: {},\r\n    selectedDay: '',\r\n    selectedHour: ''\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case GET_WEATHER_FORECAST:\r\n            return {\r\n                ...state,\r\n                mainInfo: payload.mainInfo,\r\n                weatherItems: payload.weatherItems,\r\n                selectedDay: payload.selectedDay,\r\n                selectedHour: payload.selectedHour,\r\n                loading: false,\r\n            };\r\n\r\n        case CLEAR_WEATHER_FORECAST:\r\n            return {\r\n                ...state,\r\n                mainInfo: {},\r\n                weatherItems: [],\r\n                loading: true,\r\n                error: {}\r\n            }\r\n\r\n        case ERROR_WEATHER_FORECAST:\r\n            return {\r\n                ...state,\r\n                error: { message: payload.errorMessage },\r\n                loading: false\r\n            };\r\n\r\n        case SET_SELECTED_DAY:\r\n            return {\r\n                ...state,\r\n                selectedDay: payload.selectedDay,\r\n                selectedHour: payload.selectedHour\r\n            };\r\n\r\n        case SET_SELECTED_HOUR:\r\n            return {\r\n                ...state,\r\n                selectedHour: payload.selectedHour\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","import { combineReducers } from 'redux'\r\nimport weatherForecast from './weatherForecast';\r\n\r\nexport default combineReducers({\r\n    weatherForecast,\r\n});","  \r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n// Redux \nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoContainer\":\"styles_infoContainer__1gc__\",\"city\":\"styles_city__11u-h\",\"date\":\"styles_date__26aN8\",\"wrapper\":\"styles_wrapper__1noko\",\"temperature\":\"styles_temperature__1bgkX\",\"wind\":\"styles_wind__1Nev4\",\"humidity\":\"styles_humidity__l7-Yp\",\"sunrise\":\"styles_sunrise__1whFc\",\"sunset\":\"styles_sunset__3q0Iv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchContainer\":\"styles_searchContainer__uTfEq\",\"form\":\"styles_form__37nGD\",\"input\":\"styles_input__236j2\",\"button\":\"styles_button__34ZWV\"};"],"sourceRoot":""}